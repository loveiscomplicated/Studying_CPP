#include <iostream>

using namespace std;


/*
1. 배열이란 무엇인가?
2. 배열을 사용하는 규칙은? + >> 인덱싱을 통한 원소 출력
3. char 문자열
*/
int main(){
    /*
    C++는 복합 데이터형을 제공한다
    >> 사용자 정의대로 새로운 데이터형을 만들 수 있다.

    복합데이터형 : 기본 정수형과 부동소수점형의 조합    
    */

    // 배열(array) : 같은 데이터형의 집합
    // typeName arrayName[arraySize]
    // short month[12]; // 배열 선언
    

    // 배열의 초기화
    short month[12] = { 1, 2, 3 }; // 아직 남은 공간 있어도 괜찮음

    cout << month[0] << endl; // 인덱싱 가능

    /*
    1. 배열 원소에 대입할 값들을 콤마로 구분하여 중괄호로 묶어 선언한다.
    2. 초기화를 선언 이후에 할 수 없다.
    3. 배열을 다른 배열에 통째로 대입할 수 없다.
    short month[5] = { ... };
    short year[12] = { ... };
    year = month; ----> 이거 안 됨

    4. 초기화 값의 개수를 배열 원소의 개수보다 모자라게 제공할 수 있다.
    5. 배열을 부분적으로 초기화하면, 나머지 원소들은 모두 0으로 설정한다.
    short month[5] = { 1, 2, 3};
    cout << month[3] << endl; --> 이거 0으로 나옴

    6. 즉, 명시적으로 첫 번째 원소만 0으로 초기화하면, 나머지 원소들은 모두 0으로 초기화된다.
    7. 배열을 초기화할 때 대괄호 속을 비워두면 컴파일러가 초기화 값의 개수를 헤아려 배열 원소 개수를 저장한다.
    short month[] = { 1, 2, 3 } 이러면 자동으로 3개짜리 배열이 됨
    단, 이 경우에 cout << month[3] << endl;을 쓰면 아무 의미 없는 주소나 나옴
    */

    

    char a[5] = {'H', 'e', 'l', 'l', 'o'};
    char b[6] = {'H', 'e', 'l', 'l', 'o', '\0'};
    char c[] = "Hello";

    cout << a << endl; // 원래는 Hello 뒤에 이상한 문자들이 붙어 있어야 함 -> 그 이유는 null 문자의 부재
    cout << b << endl; // 이건 앞의 예시에서 나온 문제점을 해결하기 위해 null 문자가 추가된 코드
    cout << c << endl; // 문자'열'을 간편하게 만드는 법
    return 0;
}